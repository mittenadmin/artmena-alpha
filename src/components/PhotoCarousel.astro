---
// PhotoCarousel.astro

import { ClientRouter, fade } from "astro:transitions";
export interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Sample images - replace with actual artwork images
const images = [
  {
    src: "https://images.unsplash.com/photo-1541961017774-22349e4a1262?w=1200&h=600&fit=crop",
    alt: "Contemporary Art Piece 1",
  },
  {
    src: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=1200&h=600&fit=crop",
    alt: "Contemporary Art Piece 2",
  },
  {
    src: "https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=1200&h=600&fit=crop",
    alt: "Contemporary Art Piece 3",
  },
  {
    src: "https://images.unsplash.com/photo-1583847268964-b28dc8f51f92?w=1200&h=600&fit=crop",
    alt: "Contemporary Art Piece 4",
  },
];
---

<photo-carousel
  class={`relative w-full h-112 md:h-[700px] overflow-hidden ${className || ""}`}
>
  <ClientRouter />
  <div
    class="carousel-track flex transition-transform duration-700 ease-in-out h-full"
    data-slides={images.length}
  >
    {
      images.map((image, index) => (
        <div class="w-full h-full flex-shrink-0 relative" data-slide={index}>
          <div class="max-w-7xl mx-auto px-8 flex h-32 items-center border-b border-primary ">
            <div class="w-1/3">
              <p class="text-secondary text-sm leading-relaxed">
                October 7, 2024 - October 31, 2024
              </p>
              <p class="text-secondary text-sm leading-relaxed">
                Alexandria, Egypt
              </p>
            </div>
            <h1 class="text-3xl font-bold text-primary mb-1">
              Corniche at Dawn - Corniche Studio Alexandria
            </h1>
          </div>
          <img
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover"
            loading={index === 0 ? "eager" : "lazy"}
            decoding="async"
          />
        </div>
      ))
    }
  </div>

  <div
    class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2"
  >
    {
      images.map((_, index) => (
        <button
          class={`carousel-indicator w-1 h-1 rounded-full transition-all ${
            index === 0
              ? "bg-white scale-125"
              : "bg-gray-500 bg-opacity-50 hover:bg-opacity-75"
          }`}
          data-slide-index={index}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))
    }
  </div>
</photo-carousel>

<style>
  photo-carousel {
    display: block;
  }
</style>

<script>
  class PhotoCarousel extends HTMLElement {
    private track: HTMLElement | null = null;
    private indicators: NodeListOf<HTMLElement> | null = null;
    private currentSlide: number = 0;
    private totalSlides: number = 0;
    private intervalId: number | null = null;
    private slideInterval: number = 4000; // 4 seconds

    connectedCallback() {
      this.track = this.querySelector(".carousel-track");
      this.indicators = this.querySelectorAll(".carousel-indicator");

      if (this.track) {
        this.totalSlides = parseInt(this.track.dataset.slides || "0");
      }

      this.init();
    }

    private init(): void {
      if (!this.track || this.totalSlides === 0) return;

      this.setupIndicators();
      this.startAutoSlide();
    }

    private setupIndicators(): void {
      this.indicators?.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          this.goToSlide(index);
        });
      });
    }

    private goToSlide(slideIndex: number): void {
      if (!this.track) return;

      this.currentSlide = slideIndex;
      const translateX = -slideIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      this.updateIndicators();
    }

    private updateIndicators(): void {
      this.indicators?.forEach((indicator, index) => {
        if (index === this.currentSlide) {
          indicator.classList.remove("bg-gray-500", "bg-opacity-50");
          indicator.classList.add("bg-white", "scale-125");
        } else {
          indicator.classList.remove("bg-white", "scale-125");
          indicator.classList.add("bg-gray-500", "bg-opacity-50");
        }
      });
    }

    private nextSlide(): void {
      const nextIndex = (this.currentSlide + 1) % this.totalSlides;
      this.goToSlide(nextIndex);
    }

    private startAutoSlide(): void {
      this.intervalId = window.setInterval(() => {
        this.nextSlide();
      }, this.slideInterval);
    }

    private stopAutoSlide(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }

    disconnectedCallback(): void {
      this.stopAutoSlide();
    }

    public destroy(): void {
      this.stopAutoSlide();
    }
  }

  // Register the custom element (only if not already defined)
  if (!customElements.get("photo-carousel")) {
    customElements.define("photo-carousel", PhotoCarousel);
  }
</script>
