---
import "../../styles/index.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHero from "../../components/PageHero.astro";
import CardList from "../../components/Cards/CardList.astro";
import { artworks } from "../../data/artworks";
import { artists } from "../../data/artists";
import { galleries } from "../../data/galleries";
import { exhibitions } from "../../data/exhibitions";

export async function getStaticPaths() {
  return artworks.map((artwork) => ({
    params: { id: artwork.id },
    props: { artwork },
  }));
}

const { artwork } = Astro.props;

// Get the artist for this artwork
const artist = artists.find((a) => a.id === artwork.artist_id)!;

// Get the gallery if any
const gallery = artwork.gallery_id
  ? galleries.find((g) => g.id === artwork.gallery_id)
  : null;

// Get other artworks by the same artist (excluding current artwork)
const moreFromArtist = artworks
  .filter((a) => a.artist_id === artwork.artist_id && a.id !== artwork.id)
  .slice(0, 4)
  .map((a) => ({
    id: a.id,
    title: a.title,
    category: a.category,
    imageSrc: a.imageUrl,
    imageAlt: a.title,
    price: a.price,
  }));

// Get exhibitions featuring this artwork
const artworkExhibitions = exhibitions
  .filter((ex) => ex.artwork_ids.includes(artwork.id))
  .map((ex) => {
    const exhibitionGallery = galleries.find((g) => g.id === ex.gallery_id);
    return {
      id: ex.id,
      title: ex.title,
      date: `${ex.startDate} - ${ex.endDate}`,
      location: exhibitionGallery
        ? `${exhibitionGallery.name}, ${exhibitionGallery.location}`
        : "",
      imageSrc: ex.imageUrl,
      imageAlt: ex.title,
    };
  });
---

<BaseLayout title={`artmena / ${artwork.title}`}>
  <div class="min-h-screen">
    <PageHero subtitle={"Insights On"} title={artwork.title} />
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex justify-center">
        {/* Image Section */}
        <div class={`w-1/2 me-auto grid grid-cols-3 gap-4 gap-x-8`}>
          <img
            src={artwork.imageUrl}
            alt={artwork.title}
            class="w-full aspect-[6/5] object-cover col-span-3 row-span-1"
            transition:name=`image-${artwork.id}`
          />
          <img
            src={artwork.imageUrl}
            alt={artwork.title}
            class="aspect-[6/5] object-cover hidden"
          />
          <img
            src={artwork.imageUrl}
            alt={artwork.title}
            class="aspect-[6/5] object-cover hidden"
          />
          <img
            src={artwork.imageUrl}
            alt={artwork.title}
            class="aspect-[6/5] object-cover hidden"
          />
        </div>
        <div class="py-4 pl-12 w-1/2">
          <a href={`/artists/${artist.id}`} class="!hover:text-primary-light">
            <h1 class="!text-secondary !normal-case">Artist</h1>
            <h1>{artist.name}</h1>
          </a>
          <div class="mt-6">
            <h2 class="!text-secondary">Medium</h2>
            <h2>{artwork.medium}</h2>
          </div>
          <div class="mt-2">
            <h2 class="!text-secondary">Dimensions</h2>
            <h2>{artwork.dimensions}</h2>
          </div>
          <div class="mt-2">
            <h2 class="!text-secondary">Year</h2>
            <h2>{artwork.year}</h2>
          </div>
          <div class="mt-2">
            <h2 class="!text-secondary">Description</h2>
            <p class="text-secondary">{artwork.description}</p>
          </div>
          {
            gallery && (
              <div class="mt-2">
                <h2 class="!text-secondary">Gallery</h2>
                <a href={`/galleries/${gallery.id}`} class="hover:text-primary">
                  <h3>{gallery.name}</h3>
                </a>
              </div>
            )
          }
          <div class="mt-2">
            <h2 class="!text-secondary">Price</h2>
            <h2>{artwork.price}</h2>
          </div>
          <div class="mt-2">
            <h2 class="!text-secondary">Status</h2>
            <h2 class="capitalize">{artwork.status}</h2>
          </div>
        </div>
      </div>
    </div>

    <div class="border-t border-b border-primary">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex">
        {/* mini nav bar*/}
        <div
          id="nav-artworks"
          data-section="artworks"
          class="w-1/4 border-b-2 border-primary hover:border-primary mr-8 py-4 cursor-pointer nav-item active ps-2"
        >
          More From This Artist
        </div>
        <div
          id="nav-exhibitions"
          data-section="exhibitions"
          class="w-1/4 border-b-2 border-transparent hover:border-primary mr-8 py-4 cursor-pointer nav-item ps-2"
        >
          Exhibitions
        </div>
      </div>
    </div>
    <div>
      {/* Artworks section */}
      <div
        id="section-artworks"
        class="section-content transition-opacity duration-200 ease-in-out opacity-100 block"
      >
        {
          moreFromArtist.length > 0 && (
            <CardList objectType="artwork" cards={moreFromArtist} maxRows={1} />
          )
        }
      </div>

      {/* Exhibitions section */}
      <div
        id="section-exhibitions"
        class="section-content transition-opacity duration-200 ease-in-out opacity-0 hidden"
      >
        {
          artworkExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              cards={artworkExhibitions}
              maxRows={1}
            />
          )
        }
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function initializeNavigation() {
    const navItems = document.querySelectorAll(".nav-item");
    const sections = document.querySelectorAll(".section-content");

    navItems.forEach((item) => {
      item.addEventListener("click", handleNavClick);
    });

    function handleNavClick(event: Event) {
      const clickedItem = event.currentTarget as HTMLElement;
      const targetSection = clickedItem.dataset.section;

      // Update navigation styles
      updateNavStyles(clickedItem);

      // Handle section transitions
      transitionToSection(targetSection);
    }

    function updateNavStyles(activeItem: HTMLElement) {
      navItems.forEach((nav) => {
        nav.classList.remove("active", "border-primary");
        nav.classList.add("border-transparent");
      });

      activeItem.classList.add("active", "border-primary");
      activeItem.classList.remove("border-transparent");
    }

    function transitionToSection(targetSection: string | undefined) {
      if (!targetSection) return;

      // Start fade out
      sections.forEach((section) => {
        section.classList.remove("opacity-100");
        section.classList.add("opacity-0");
      });

      // After fade out, hide all and show target
      setTimeout(() => {
        sections.forEach((section) => {
          section.classList.add("hidden");
          section.classList.remove("block");
        });

        const targetElement = document.getElementById(
          `section-${targetSection}`,
        );
        if (targetElement) {
          targetElement.classList.remove("hidden");
          targetElement.classList.add("block");

          // Trigger fade in after layout update
          requestAnimationFrame(() => {
            targetElement.classList.remove("opacity-0");
            targetElement.classList.add("opacity-100");
          });
        }
      }, 200);
    }
  }

  // Single initialization on Astro page load
  document.addEventListener("astro:page-load", initializeNavigation);
</script>
