---
import "../../styles/index.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHero from "../../components/PageHero.astro";
import CardList from "../../components/Cards/CardList.astro";
import type { Gallery } from "../../data/types";

import { galleries } from "../../data/galleries";
import { artists } from "../../data/artists";
import { artworks } from "../../data/artworks";
import { exhibitions } from "../../data/exhibitions";

export async function getStaticPaths() {
  return galleries.map((gallery) => ({
    params: { id: gallery.id },
    props: { gallery },
  }));
}

const { gallery }: { gallery: Gallery } = Astro.props;

// Get artists represented by this gallery
const galleryArtists = gallery.artist_ids
  .map((artistId) => artists.find((a) => a.id === artistId))
  .filter(
    (artist): artist is NonNullable<typeof artist> => artist !== undefined,
  )
  .map((artist) => ({
    id: artist.id,
    title: artist.name,
    category: artist.category,
    imageSrc: artist.imageUrl,
    imageAlt: artist.name,
  }));

// Get artworks in this gallery
const galleryArtworks = artworks
  .filter((artwork) => artwork.gallery_id === gallery.id)
  .map((artwork) => {
    const artist = artists.find((a) => a.id === artwork.artist_id)!;
    return {
      id: artwork.id,
      title: artwork.title,
      category: artwork.category,
      artist: artist.name,
      imageSrc: artwork.imageUrl,
      imageAlt: artwork.title,
    };
  });

// Get exhibitions at this gallery
const galleryExhibitions = exhibitions.filter(
  (ex) => ex.gallery_id === gallery.id,
);

const upcomingExhibitions = galleryExhibitions
  .filter((ex) => ex.status === "upcoming" || ex.status === "current")
  .map((ex) => ({
    id: ex.id,
    title: ex.title,
    date: `${ex.startDate} - ${ex.endDate}`,
    location: gallery.name,
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
  }));

const pastExhibitions = galleryExhibitions
  .filter((ex) => ex.status === "past")
  .map((ex) => ({
    id: ex.id,
    title: ex.title,
    date: `${ex.startDate} - ${ex.endDate}`,
    location: gallery.name,
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
  }));
---

<BaseLayout title={`artmena/ ${gallery.name}`}>
  <div class="min-h-screen">
    <PageHero subtitle={"Learn About"} title={gallery.name} />
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex">
        {/* Image Section */}
        <img
          src={gallery.imageUrl}
          alt={gallery.name}
          class="w-1/4 h-full aspect-square object-cover"
          transition:name=`image-${gallery.id}`
        />
        <div class="w-1/4 flex flex-col gap-4 pl-12 py-4">
          <div>
            <h2 class="!text-secondary">Address</h2>
            <h3>{gallery.address}</h3>
            <h3>{gallery.location}, {gallery.country}</h3>
          </div>
          <div>
            <h2 class="!text-secondary">Contact</h2>
            <h3>{gallery.phone}</h3>
            <h3>{gallery.email}</h3>
            {gallery.website && <h3>{gallery.website}</h3>}
          </div>
        </div>
        <div class="w-1/2 pl-12 py-4">
          <p class="mt-4 !text-primary">{gallery.description}</p>
        </div>
      </div>
    </div>
    <div class="border-t border-b border-primary">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex">
        {/* mini nav bar*/}
        <div
          id="nav-exhibitions"
          data-section="exhibitions"
          class="w-1/4 border-b-2 border-primary hover:border-primary mr-8 py-4 cursor-pointer active nav-item ps-2"
        >
          Exhibitions
        </div>
        <div
          id="nav-artworks"
          data-section="artworks"
          class="w-1/4 border-b-2 border-transparent hover:border-primary mr-8 py-4 cursor-pointer nav-item ps-2"
        >
          Artworks
        </div>
        <div
          id="nav-artists"
          data-section="artists"
          class="w-1/4 border-b-2 border-transparent hover:border-primary mr-8 py-4 cursor-pointer nav-item ps-2"
        >
          Artists
        </div>
      </div>
    </div>

    <div>
      {/* Exhibitions section */}
      <div
        id="section-exhibitions"
        class="section-content transition-opacity duration-200 ease-in-out opacity-100 block"
      >
        {/* Upcoming Exhibitions */}
        {
          upcomingExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              title="Upcoming Exhibitions"
              cards={upcomingExhibitions}
              maxRows={1}
            />
          )
        }

        {/* Past Exhibitions */}
        {
          pastExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              title="Past Exhibitions"
              cards={pastExhibitions}
              maxRows={1}
            />
          )
        }
      </div>

      {/* Artworks section */}
      <div
        id="section-artworks"
        class="section-content transition-opacity duration-200 ease-in-out opacity-0 hidden"
      >
        {
          galleryArtworks.length > 0 && (
            <CardList objectType="artwork" cards={galleryArtworks} />
          )
        }
      </div>

      {/* Artists section */}
      <div
        id="section-artists"
        class="section-content transition-opacity duration-200 ease-in-out opacity-0 hidden"
      >
        {
          galleryArtists.length > 0 && (
            <CardList
              objectType="artists"
              cards={galleryArtists}
              imageRatio={"3:4"}
            />
          )
        }
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function initializeNavigation() {
    const navItems = document.querySelectorAll(".nav-item");
    const sections = document.querySelectorAll(".section-content");

    navItems.forEach((item) => {
      item.addEventListener("click", handleNavClick);
    });

    function handleNavClick(event: Event) {
      const clickedItem = event.currentTarget as HTMLElement;
      const targetSection = clickedItem.dataset.section;

      // Update navigation styles
      updateNavStyles(clickedItem);

      // Handle section transitions
      transitionToSection(targetSection);
    }

    function updateNavStyles(activeItem: HTMLElement) {
      navItems.forEach((nav) => {
        nav.classList.remove("active", "border-primary");
        nav.classList.add("border-transparent");
      });

      activeItem.classList.add("active", "border-primary");
      activeItem.classList.remove("border-transparent");
    }

    function transitionToSection(targetSection: string | undefined) {
      if (!targetSection) return;

      // Start fade out
      sections.forEach((section) => {
        section.classList.remove("opacity-100");
        section.classList.add("opacity-0");
      });

      // After fade out, hide all and show target
      setTimeout(() => {
        sections.forEach((section) => {
          section.classList.add("hidden");
          section.classList.remove("block");
        });

        const targetElement = document.getElementById(
          `section-${targetSection}`,
        );
        if (targetElement) {
          targetElement.classList.remove("hidden");
          targetElement.classList.add("block");

          // Trigger fade in after layout update
          requestAnimationFrame(() => {
            targetElement.classList.remove("opacity-0");
            targetElement.classList.add("opacity-100");
          });
        }
      }, 200);
    }
  }

  // Single initialization on Astro page load
  document.addEventListener("astro:page-load", initializeNavigation);
</script>
