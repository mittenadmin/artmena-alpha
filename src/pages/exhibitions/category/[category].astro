---
import "../../../styles/index.css";

import PageHero from "../../../components/PageHero.astro";
import CardList from "../../../components/Cards/CardList.astro";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { exhibitions } from "../../../data/exhibitions";
import { galleries } from "../../../data/galleries";

export async function getStaticPaths() {
  return [
    { params: { category: "current" } },
    { params: { category: "upcoming" } },
    { params: { category: "past" } },
  ];
}

// Get current date for filtering
const currentDate = new Date();

// Filter exhibitions into current, upcoming and past based on dates
const currentExhibitionsData = exhibitions.filter((ex) => {
  const startDate = new Date(ex.startDate);
  const endDate = new Date(ex.endDate);
  return startDate <= currentDate && endDate >= currentDate;
});

const upcomingExhibitionsData = exhibitions.filter((ex) => {
  const startDate = new Date(ex.startDate);
  return startDate > currentDate;
});

const pastExhibitionsData = exhibitions.filter((ex) => {
  const endDate = new Date(ex.endDate);
  return endDate < currentDate;
});

// Transform current exhibitions for CardList component
const currentExhibitions = currentExhibitionsData.map((ex) => {
  const gallery = galleries.find((g) => g.id === ex.gallery_id);
  return {
    id: ex.id,
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
    title: ex.title,
    text1: `${ex.startDate} - ${ex.endDate}`,
    text2: gallery ? `${gallery.location}, ${gallery.country}` : "Location TBA",
  };
});

// Transform upcoming exhibitions for CardList component
const upcomingExhibitions = upcomingExhibitionsData.map((ex) => {
  const gallery = galleries.find((g) => g.id === ex.gallery_id);
  return {
    id: ex.id,
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
    title: ex.title,
    text1: `${ex.startDate} - ${ex.endDate}`,
    text2: gallery ? `${gallery.location}, ${gallery.country}` : "Location TBA",
  };
});

// Transform past exhibitions for CardList component
const pastExhibitions = pastExhibitionsData.map((ex) => {
  const gallery = galleries.find((g) => g.id === ex.gallery_id);
  return {
    id: ex.id,
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
    title: ex.title,
    text1: `${ex.startDate} - ${ex.endDate}`,
    text2: gallery ? `${gallery.location}, ${gallery.country}` : "Location TBA",
  };
});
// Get the category from URL params
const { category } = Astro.params;

// Determine which exhibitions to show based on category
let exhibitionsToShow: any[];
let pageTitle: string;

switch (category) {
  case "current":
    exhibitionsToShow = currentExhibitions;
    pageTitle = "Current Exhibitions";
    break;
  case "upcoming":
    exhibitionsToShow = upcomingExhibitions;
    pageTitle = "Upcoming Exhibitions";
    break;
  case "past":
    exhibitionsToShow = pastExhibitions;
    pageTitle = "Past Exhibitions";
    break;
  default:
    exhibitionsToShow = [
      ...currentExhibitions,
      ...upcomingExhibitions,
      ...pastExhibitions,
    ];
    pageTitle = "All Exhibitions";
}
---

<BaseLayout title="artmena/exhibitions" description="artmena">
  <div class="min-h-screen">
    <PageHero title={pageTitle} />

    <CardList cards={exhibitionsToShow} objectType="exhibitions" />
  </div>
</BaseLayout>
