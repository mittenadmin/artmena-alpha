---
import "../../styles/index.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHero from "../../components/PageHero.astro";
import CardList from "../../components/Cards/CardList.astro";
import { artists } from "../../data/artists";
import { artworks } from "../../data/artworks";
import { exhibitions } from "../../data/exhibitions";
import { galleries } from "../../data/galleries";

export async function getStaticPaths() {
  return artists.map((artist) => ({
    params: { id: artist.id },
    props: { artist },
  }));
}

const { artist } = Astro.props;

// Get artworks for this artist
const artistArtworks = artworks
  .filter((artwork) => artwork.artist_id === artist.id)
  .map((artwork) => ({
    id: artwork.id,
    title: artwork.title,
    category: artwork.category,
    imageSrc: artwork.imageUrl,
    imageAlt: artwork.title,
    text1: artwork.medium,
    text2: artwork.price,
  }));

// Get exhibitions this artist is participating in
const artistExhibitions = exhibitions.filter((exhibition) =>
  exhibition.artist_ids.includes(artist.id),
);

// Get current date for comparison
const currentDate = new Date();
const currentDateStr = currentDate.toISOString().split("T")[0]; // YYYY-MM-DD format

// Helper function to transform exhibition data
const transformExhibition = (ex: any) => {
  const gallery = galleries.find((g) => g.id === ex.gallery_id);
  return {
    id: ex.id,
    title: ex.title,
    text2: `${ex.startDate} - ${ex.endDate}`,
    text1: gallery ? `${gallery.name}, ${gallery.location}` : "",
    imageSrc: ex.imageUrl,
    imageAlt: ex.title,
  };
};

// Filter exhibitions by date comparison
const upcomingExhibitions = artistExhibitions
  .filter((ex) => ex.startDate > currentDateStr)
  .map(transformExhibition);

const currentExhibitions = artistExhibitions
  .filter(
    (ex) => ex.startDate <= currentDateStr && ex.endDate >= currentDateStr,
  )
  .map(transformExhibition);

const pastExhibitions = artistExhibitions
  .filter((ex) => ex.endDate < currentDateStr)
  .map(transformExhibition);

// Get galleries representing this artist
const representingGalleries = galleries.filter((gallery) =>
  gallery.artist_ids.includes(artist.id),
);
---

<BaseLayout title={`${artist.name} - Artist Profile`}>
  <div class="min-h-screen">
    <PageHero subtitle={"meet"} title={artist.name} />
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex justify-center">
        <div class="flex w-full md:w-3/4">
          {/* Image Section */}
          <div class={`w-1/2 aspect-[3/4]`}>
            <img
              src={artist.imageUrl}
              alt={artist.name}
              class="w-full h-full object-cover"
              transition:name=`image-${artist.id}`
            />
          </div>
          <div class="w-full py-4 pl-12">
            <h1>{artist.name}</h1>
            <p>{artist.location}, {artist.country} - B. {artist.birthYear}</p>
            <p class="mt-4 !text-primary">{artist.bio}</p>
          </div>
        </div>
        <div class="flex flex-col w-full md:w-1/4 py-4 pl-12">
          <h2 class="!text-primary pb-2">Represented By</h2>
          {
            representingGalleries.map((gallery) => (
              <a href={`/galleries/${gallery.id}`} class="hover:text-primary">
                <h3>{gallery.name}</h3>
              </a>
            ))
          }
        </div>
      </div>
    </div>
    <div class="border-t border-b border-primary">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex">
        {/* mini nav bar*/}
        <div
          id="nav-artworks"
          data-section="artworks"
          class="w-1/4 border-b-2 border-primary hover:border-primary mr-8 py-4 cursor-pointer nav-item active ps-2"
        >
          Artworks
        </div>
        <div
          id="nav-exhibitions"
          data-section="exhibitions"
          class="w-1/4 border-b-2 border-transparent hover:border-primary mr-8 py-4 cursor-pointer nav-item ps-2"
        >
          Exhibitions
        </div>
      </div>
    </div>
    <div>
      {/* Artworks section */}
      <div
        id="section-artworks"
        class="section-content transition-opacity duration-200 ease-in-out opacity-100 block"
      >
        <CardList objectType="artwork" cards={artistArtworks} />
      </div>

      {/* Exhibitions section */}
      <div
        id="section-exhibitions"
        class="section-content transition-opacity duration-200 ease-in-out opacity-0 hidden"
      >
        {/* Current Exhibitions */}
        {
          currentExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              title="Current Exhibitions"
              cards={currentExhibitions}
              maxRows={1}
            />
          )
        }

        {/* Upcoming Exhibitions */}
        {
          upcomingExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              title="Upcoming Exhibitions"
              cards={upcomingExhibitions}
              maxRows={1}
            />
          )
        }

        {/* Past Exhibitions */}
        {
          pastExhibitions.length > 0 && (
            <CardList
              objectType="exhibitions"
              title="Past Exhibitions"
              cards={pastExhibitions}
              maxRows={1}
            />
          )
        }
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function initializeNavigation() {
    const navItems = document.querySelectorAll(".nav-item");
    const sections = document.querySelectorAll(".section-content");

    navItems.forEach((item) => {
      item.addEventListener("click", handleNavClick);
    });

    function handleNavClick(event: Event) {
      const clickedItem = event.currentTarget as HTMLElement;
      const targetSection = clickedItem.dataset.section;

      // Update navigation styles
      updateNavStyles(clickedItem);

      // Handle section transitions
      transitionToSection(targetSection);
    }

    function updateNavStyles(activeItem: HTMLElement) {
      navItems.forEach((nav) => {
        nav.classList.remove("active", "border-primary");
        nav.classList.add("border-transparent");
      });

      activeItem.classList.add("active", "border-primary");
      activeItem.classList.remove("border-transparent");
    }

    function transitionToSection(targetSection: string | undefined) {
      if (!targetSection) return;

      // Start fade out
      sections.forEach((section) => {
        section.classList.remove("opacity-100");
        section.classList.add("opacity-0");
      });

      // After fade out, hide all and show target
      setTimeout(() => {
        sections.forEach((section) => {
          section.classList.add("hidden");
          section.classList.remove("block");
        });

        const targetElement = document.getElementById(
          `section-${targetSection}`,
        );
        if (targetElement) {
          targetElement.classList.remove("hidden");
          targetElement.classList.add("block");

          // Trigger fade in after layout update
          requestAnimationFrame(() => {
            targetElement.classList.remove("opacity-0");
            targetElement.classList.add("opacity-100");
          });
        }
      }, 200);
    }
  }

  // Single initialization on Astro page load
  document.addEventListener("astro:page-load", initializeNavigation);
</script>
